{"version":3,"file":"component---node-modules-sudaraka-94-gatsby-theme-novela-src-templates-article-template-tsx-content-file-path-content-posts-2024-12-22-high-cardinality-tags-in-metrics-index-mdx-c0aaee30af3ad1aff02d.js","mappings":"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","sources":["webpack://novela-blog/./content/posts/2024-12-22-high-cardinality-tags-in-metrics/index.mdx","webpack://novela-blog/./node_modules/@sudaraka94/gatsby-theme-novela/src/templates/article.template.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I wanted to share how I tackled the problem of high cardinality tags in a certain metric. But first, let me give some context around the topic of Metrics and Metric tags.\"), \"\\n\", React.createElement(_components.h2, null, \"Metrics\"), \"\\n\", React.createElement(_components.p, null, \"Metrics are a vital part of any software system. You can find many mature Specifications in different technology domains standardizing the usage of metrics. \", React.createElement(_components.a, {\n    href: \"https://microprofile.io/specifications/metrics\",\n    target: \"_blank\",\n    rel: \"noreferrer\"\n  }, \"Microprofile Metrics Specification\"), \",\\nis one of my favourites. But introducing a metric to a system isn’t always a straightforward decision, We always need to figure out what works best for the use case. This comes down to the questions such as,\\nIs it A counter? A gauge? or some other type of metric?\\nWhat are the metadata we want to include as tags in the metric?\\nHow is it going to be visualized?\\nWill there be any monitors set up on the metric?\"), \"\\n\", React.createElement(_components.h2, null, \"Metric Tags\"), \"\\n\", React.createElement(_components.p, null, \"One of the main aspects of a metric is tags. Metric tags give us a lot of agility in visualizing and analyzing certain metrics. Let’s take a hypothetical example.\\nYou have an API service that allows users to make event ticket purchases. Now you want to monitor the purchases happening through the API and track the aspects such as,\\nNumber of purchases by each account per minute\\nCountry of origin for each purchase\\nWhether each purchase was successful or failed\\nServer id, which served the specific purchase\"), \"\\n\", React.createElement(_components.p, null, \"To obtain these types of insights, we can simply tag the metric with the relevant information.\\nTag the metric with, \", React.createElement(_components.code, null, \"country: us\"), \" to group purchase metrics with the country.\\nTag the metric with, \", React.createElement(_components.code, null, \"success: true\"), \" or \", React.createElement(_components.code, null, \"success: false\"), \" depending on the status of the call. This might help track the failure rate of the calls made to the API.\"), \"\\n\", React.createElement(_components.h2, null, \"Collecting and Visualizing Metrics\"), \"\\n\", React.createElement(_components.p, null, \"For collecting and visualizing metrics, you have two options\\nYou can use a self-hosted solution like Prometheus.\\nYou can use a platform like DataDog/NewRelic.\\nI don’t want to bore you with the details about the pros and cons of both. But the problem I’m talking about is mostly related to the second option.\"), \"\\n\", React.createElement(_components.p, null, \"When using third-party services like DataDog, they do have a pricing strategy that accounts for the cardinality of the tags added for the metrics. For example, \", React.createElement(_components.a, {\n    href: \"https://docs.datadoghq.com/account_management/billing/custom_metrics/?tab=countrate#when-are-you-charged-for-ingested-vs-indexed-custom-metrics\",\n    target: \"_blank\",\n    rel: \"noreferrer\"\n  }, \"this Datadog documentation\"), \" explains\\nhow tags and the cardinality of tags cause a single metric to be reported as multiple custom metrics in DataDog.\"), \"\\n\", React.createElement(_components.p, null, \"TLDR; When you have metrics with exponentially high cardinality, you have to pay so much more.\"), \"\\n\", React.createElement(_components.h2, null, \"How Can we tackle this problem efficiently?\"), \"\\n\", React.createElement(_components.p, null, \"Let’s take the previous hypothetical scenario. I gave a few examples of tags we can add to the metric. One of them was adding the accountId (or any other account identifier) to the metric for tracking the rate of purchases in the scope of an account. But unlike adding the country as a tag (there is only a finite amount of countries in the world), adding the accountId can be super expensive due to the sheer number of accounts that can be created within the system. Cost isn’t the only problem here. Having a tag with so many values might not provide really meaningful insights as well.\\nOne of the solutions is to use a histogram metric for tracking the rate of purchases. The histogram aggregates the reported values into different buckets. Consider following values\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Account A -> 1 purchases per minute\"), \"\\n\", React.createElement(_components.li, null, \"Account B -> 1000 purchases per minute\"), \"\\n\", React.createElement(_components.li, null, \"Account C -> 1001 purchases per minute\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Instead of tagging the metric with the accountId, the distribution of purchases per minute can be divided into buckets by the number of purchases made within the time window. According to the example,\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"0 <= n < 100\"), \": [Account A]\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"1000 <= n < 1100\"), \": [Account B, Account C]\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"This way, we can essentially eliminate the high cardinality tags and obtain meaningful insights from the metrics such as,\\nHow many accounts are there with above 1000 purchases per minute?\\nIf we were to rate limit the API for too many purchase requests, what would be the limit value?\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"It’s always critical to think about the cost when adding metrics. High cardinality tags can be the cause of unexpectedly high invoices from observability vendors like NewRelic and Datadog. If this is happening, it’s always worth backtracking from what you really want to measure to what kind of metric you need to use.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/sudaraka94.github.io/sudaraka94.github.io/content/posts/2024-12-22-high-cardinality-tags-in-metrics/index.mdx\";\nimport React, {useRef, useState, useEffect} from \"react\";\nimport styled from \"@emotion/styled\";\nimport throttle from \"lodash/throttle\";\nimport {graphql, useStaticQuery} from \"gatsby\";\nimport Layout from \"@components/Layout\";\nimport MDXRenderer from \"@components/MDX\";\nimport Progress from \"@components/Progress\";\nimport Section from \"@components/Section\";\nimport mediaqueries from \"@styles/media\";\nimport {debounce} from \"@utils\";\nimport ArticleAside from \"../sections/article/Article.Aside\";\nimport ArticleHero from \"../sections/article/Article.Hero\";\nimport ArticleControls from \"../sections/article/Article.Controls\";\nimport ArticlesNext from \"../sections/article/Article.Next\";\nimport ArticleSEO from \"../sections/article/Article.SEO\";\nimport ArticleShare from \"../sections/article/Article.Share\";\nimport ArticleFooter from './article.footer.template';\nconst siteQuery = graphql`\n  {\n    allSite {\n      edges {\n        node {\n          siteMetadata {\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nconst Article = ({pageContext, location, children}) => {\n  const contentSectionRef = useRef(null);\n  const [hasCalculated, setHasCalculated] = useState(false);\n  const [contentHeight, setContentHeight] = useState(0);\n  const results = useStaticQuery(siteQuery);\n  const name = results.allSite.edges[0].node.siteMetadata.name;\n  const {article, authors, next} = pageContext;\n  useEffect(() => {\n    const calculateBodySize = throttle(() => {\n      const contentSection = contentSectionRef.current;\n      if (!contentSection) return;\n      if (!hasCalculated) {\n        const debouncedCalculation = debounce(calculateBodySize);\n        const $imgs = contentSection.querySelectorAll(\"img\");\n        $imgs.forEach($img => {\n          if (!$img.complete) $img.onload = debouncedCalculation;\n        });\n        setHasCalculated(true);\n      }\n      setContentHeight(contentSection.getBoundingClientRect().height);\n    }, 20);\n    calculateBodySize();\n    window.addEventListener(\"resize\", calculateBodySize);\n    return () => window.removeEventListener(\"resize\", calculateBodySize);\n  }, []);\n  return React.createElement(Layout, null, React.createElement(ArticleSEO, {\n    article: article,\n    authors: authors,\n    location: location\n  }), React.createElement(ArticleHero, {\n    article: article,\n    authors: authors\n  }), React.createElement(ArticleAside, {\n    contentHeight: contentHeight\n  }, React.createElement(Progress, {\n    contentHeight: contentHeight\n  })), React.createElement(MobileControls, null, React.createElement(ArticleControls)), React.createElement(ArticleBody, {\n    ref: contentSectionRef\n  }, React.createElement(MDXRenderer, null, React.createElement(ArticleShare), children)), React.createElement(ArticleFooter, {\n    pageContext: pageContext\n  }), next.length > 0 && React.createElement(NextArticle, {\n    narrow: true\n  }, React.createElement(FooterNext, null, \"More articles from \", name), React.createElement(ArticlesNext, {\n    articles: next\n  }), React.createElement(FooterSpacer)));\n};\nArticle\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Article, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst MobileControls = (styled.div)`\n  position: relative;\n  padding-top: 60px;\n  transition: background 0.2s linear;\n  text-align: center;\n\n  ${(mediaqueries.tablet_up)`\n    display: none;\n  `}\n`;\nconst ArticleBody = (styled.article)`\n  position: relative;\n  padding: 160px 0 35px;\n  padding-left: 68px;\n  transition: background 0.2s linear;\n\n  ${(mediaqueries.desktop)`\n    padding-left: 53px;\n  `}\n  \n  ${(mediaqueries.tablet)`\n    padding: 70px 0 80px;\n  `}\n\n  ${(mediaqueries.phablet)`\n    padding: 60px 0;\n  `}\n`;\nconst NextArticle = (styled(Section))`\n  display: block;\n`;\nconst FooterNext = (styled.h3)`\n  position: relative;\n  opacity: 0.25;\n  margin-bottom: 100px;\n  font-weight: 400;\n  color: ${p => p.theme.colors.primary};\n\n  ${(mediaqueries.tablet)`\n    margin-bottom: 60px;\n  `}\n\n  &::after {\n    content: '';\n    position: absolute;\n    background: ${p => p.theme.colors.grey};\n    width: ${810 / 1140 * 100}%;\n    height: 1px;\n    right: 0;\n    top: 11px;\n\n    ${(mediaqueries.tablet)`\n      width: ${600 / 1140 * 100}%;\n    `}\n\n    ${(mediaqueries.phablet)`\n      width: ${400 / 1140 * 100}%;\n    `}\n\n    ${(mediaqueries.phone)`\n      width: 90px\n    `}\n  }\n`;\nconst FooterSpacer = (styled.div)`\n  margin-bottom: 65px;\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","code","ul","li","_provideComponents","components","React","href","target","rel","wrapper","MDXLayout","Article","_ref","pageContext","location","children","contentSectionRef","useRef","hasCalculated","setHasCalculated","useState","contentHeight","setContentHeight","name","useStaticQuery","allSite","edges","node","siteMetadata","article","authors","next","useEffect","calculateBodySize","throttle","contentSection","current","debouncedCalculation","debounce","querySelectorAll","forEach","$img","complete","onload","getBoundingClientRect","height","window","addEventListener","removeEventListener","Layout","ArticleSEO","ArticleHero","ArticleAside","Progress","MobileControls","ArticleControls","ArticleBody","ref","MDXRenderer","ArticleShare","ArticleFooter","length","NextArticle","narrow","FooterNext","ArticlesNext","articles","FooterSpacer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","_styled","mediaqueries","tablet_up","_templateObject","_taggedTemplateLiteralLoose","desktop","_templateObject2","tablet","_templateObject3","phablet","_templateObject4","Section","styles","theme","colors","primary","_templateObject5","grey","_templateObject6","_templateObject7","phone","_templateObject8"],"sourceRoot":""}